diff --git a/lib/matplotlib/fontconfig_pattern.py b/lib/matplotlib/fontconfig_pattern.py
index d15b937b2..1f4df32c0 100644
--- a/lib/matplotlib/fontconfig_pattern.py
+++ b/lib/matplotlib/fontconfig_pattern.py
@@ -14,7 +14,7 @@ A module for parsing and generating `fontconfig patterns`_.
 
 from functools import lru_cache
 import re
-
+import numpy as np
 from pyparsing import (Literal, ZeroOrMore, Optional, Regex, StringEnd,
                        ParseException, Suppress)
 
@@ -177,19 +177,36 @@ class FontconfigPatternParser:
 parse_fontconfig_pattern = lru_cache()(FontconfigPatternParser().parse)
 
 
+def _escape_val(val, escape_func):
+    """
+    Given a string value or a list of string values, run each value through
+    the input escape function to make the values into legal font config
+    strings.  The result is returned as a string.
+    """
+    if not np.iterable(val) or isinstance(val, str):
+        val = [val]
+
+    return ','.join(escape_func(r'\\\1', str(x)) for x in val
+                    if x is not None)
+
+
 def generate_fontconfig_pattern(d):
     """
     Given a dictionary of key/value pairs, generates a fontconfig
     pattern string.
     """
     props = []
-    for key in 'family style variant weight stretch file size'.split():
+
+    # Family is added first w/o a keyword
+    family = d.get_family()
+    if family is not None and family != []:
+        props.append(_escape_val(family, family_escape))
+
+    # The other keys are added as key=value
+    for key in ['style', 'variant', 'weight', 'stretch', 'file', 'size']:
         val = getattr(d, 'get_' + key)()
+        # Don't use 'if not val' because 0 is a valid input.
         if val is not None and val != []:
-            if type(val) == list:
-                val = [value_escape(r'\\\1', str(x)) for x in val
-                       if x is not None]
-                if val != []:
-                    val = ','.join(val)
-            props.append(":%s=%s" % (key, val))
+            props.append(":%s=%s" % (key, _escape_val(val, value_escape)))
+
     return ''.join(props)
