diff --git a/cookiecutter/cli.py b/cookiecutter/cli.py
index 6702b61..8b2bda7 100755
--- a/cookiecutter/cli.py
+++ b/cookiecutter/cli.py
@@ -18,6 +18,7 @@ import click
 
 from cookiecutter import __version__
 from cookiecutter.main import cookiecutter
+from cookiecutter.exceptions import OutputDirExistsException
 
 logger = logging.getLogger(__name__)
 
@@ -67,4 +68,8 @@ def main(template, no_input, checkout, verbose):
             level=logging.INFO
         )
 
-    cookiecutter(template, checkout, no_input)
+    try:
+        cookiecutter(template, checkout, no_input)
+    except OutputDirExistsException as e:
+        click.echo(e)
+        sys.exit(1)
diff --git a/cookiecutter/exceptions.py b/cookiecutter/exceptions.py
index fe7cf59..c1d626c 100755
--- a/cookiecutter/exceptions.py
+++ b/cookiecutter/exceptions.py
@@ -68,3 +68,9 @@ class ContextDecodingException(CookiecutterException):
     """
     Raised when a project's JSON context file can not be decoded.
     """
+
+
+class OutputDirExistsException(CookiecutterException):
+    """
+    Raised when the output directory of the project exists already.
+    """
diff --git a/cookiecutter/generate.py b/cookiecutter/generate.py
index f21c544..8bc63a3 100755
--- a/cookiecutter/generate.py
+++ b/cookiecutter/generate.py
@@ -21,7 +21,11 @@ from jinja2.environment import Environment
 from jinja2.exceptions import TemplateSyntaxError
 from binaryornot.check import is_binary
 
-from .exceptions import NonTemplatedInputDirException, ContextDecodingException
+from .exceptions import (
+    NonTemplatedInputDirException,
+    ContextDecodingException,
+    OutputDirExistsException
+)
 from .find import find_template
 from .utils import make_sure_path_exists, work_in
 from .hooks import run_hook
@@ -148,7 +152,7 @@ def generate_file(project_dir, infile, context, env):
     shutil.copymode(infile, outfile)
 
 
-def render_and_create_dir(dirname, context, output_dir):
+def render_and_create_dir(dirname, context, output_dir, fail_if_exists=False):
     """
     Renders the name of a directory, creates the directory, and
     returns its path.
@@ -163,6 +167,12 @@ def render_and_create_dir(dirname, context, output_dir):
     dir_to_create = os.path.normpath(
         os.path.join(output_dir, rendered_dirname)
     )
+
+    if fail_if_exists:
+        if os.path.exists(dir_to_create):
+            msg = 'Error: "{}" directory already exists'.format(dir_to_create)
+            raise OutputDirExistsException(msg)
+
     make_sure_path_exists(dir_to_create)
     return dir_to_create
 
@@ -192,7 +202,10 @@ def generate_files(repo_dir, context=None, output_dir='.'):
 
     unrendered_dir = os.path.split(template_dir)[1]
     ensure_dir_is_templated(unrendered_dir)
-    project_dir = render_and_create_dir(unrendered_dir, context, output_dir)
+    project_dir = render_and_create_dir(unrendered_dir,
+                                        context,
+                                        output_dir,
+                                        fail_if_exists=True)
 
     # We want the Jinja path and the OS paths to match. Consequently, we'll:
     #   + CD to the template folder
