diff --git a/luigi/configuration/core.py b/luigi/configuration/core.py
index 7ca0d6e6..54e34f3b 100644
--- a/luigi/configuration/core.py
+++ b/luigi/configuration/core.py
@@ -40,19 +40,21 @@ if PARSER not in PARSERS:
     PARSER = DEFAULT_PARSER
 
 
+def _check_parser(parser_class, parser):
+    if not parser_class.enabled:
+        msg = (
+            "Parser not installed yet. "
+            "Please, install luigi with required parser:\n"
+            "pip install luigi[{parser}]"
+        )
+        raise ImportError(msg.format(parser=parser))
+
+
 def get_config(parser=PARSER):
     """Get configs singleton for parser
     """
-
     parser_class = PARSERS[parser]
-    if not parser_class.enabled:
-        logger.error((
-                "Parser not installed yet. "
-                "Please, install luigi with required parser:\n"
-                "pip install luigi[{parser}]"
-            ).format(parser)
-        )
-
+    _check_parser(parser_class, parser)
     return parser_class.instance()
 
 
@@ -66,9 +68,19 @@ def add_config_path(path):
     # select parser by file extension
     _base, ext = os.path.splitext(path)
     if ext and ext[1:] in PARSERS:
-        parser_class = PARSERS[ext[1:]]
+        parser = ext[1:]
     else:
-        parser_class = PARSERS[PARSER]
+        parser = PARSER
+    parser_class = PARSERS[parser]
+
+    _check_parser(parser_class, parser)
+    if parser != PARSER:
+        msg = (
+            "Config for {added} parser added, but used {used} parser. "
+            "Set up right parser via env var: "
+            "export LUIGI_CONFIG_PARSER={added}"
+        )
+        warnings.warn(msg.format(added=parser, used=PARSER))
 
     # add config path to parser
     parser_class.add_config_path(path)
