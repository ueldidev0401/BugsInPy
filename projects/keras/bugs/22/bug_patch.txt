diff --git a/keras/initializers.py b/keras/initializers.py
index 84af5bbf..6d51491a 100644
--- a/keras/initializers.py
+++ b/keras/initializers.py
@@ -268,8 +268,8 @@ class Identity(Initializer):
     """Initializer that generates the identity matrix.
 
     Only use for 2D matrices.
-    If the long side of the matrix is a multiple of the short side,
-    multiple identity matrices are concatenated along the long side.
+    If the desired matrix is not square, it pads with zeros on the
+    additional rows/columns
 
     # Arguments
         gain: Multiplicative factor to apply to the identity matrix.
@@ -283,17 +283,20 @@ class Identity(Initializer):
             raise ValueError(
                 'Identity matrix initializer can only be used for 2D matrices.')
 
-        if max(shape) % min(shape) != 0:
-            raise ValueError('Long side should be multiple of short side.')
-
         if shape[0] == shape[1]:
             return self.gain * np.identity(shape[0])
         elif shape[0] > shape[1]:
             return self.gain * np.concatenate(
-                [np.identity(shape[1])] * (shape[0] // shape[1]), axis=0)
+                [np.identity(shape[1]),
+                 np.zeros((shape[0] - shape[1], shape[1]))],
+                axis=0
+            )
         else:
             return self.gain * np.concatenate(
-                [np.identity(shape[0])] * (shape[1] // shape[0]), axis=1)
+                [np.identity(shape[0]),
+                 np.zeros((shape[0], shape[1] - shape[0]))],
+                axis=1
+            )
 
     def get_config(self):
         return {
diff --git a/keras/layers/recurrent.py b/keras/layers/recurrent.py
index 1563d5d0..b5a6a2fd 100644
--- a/keras/layers/recurrent.py
+++ b/keras/layers/recurrent.py
@@ -1267,6 +1267,14 @@ class GRUCell(Layer):
 
     def build(self, input_shape):
         input_dim = input_shape[-1]
+
+        if isinstance(self.recurrent_initializer, initializers.Identity):
+            def recurrent_identity(shape, gain=1.):
+                return gain * np.concatenate(
+                    [np.identity(shape[0])] * (shape[1] // shape[0]), axis=1)
+
+            self.recurrent_initializer = recurrent_identity
+
         self.kernel = self.add_weight(shape=(input_dim, self.units * 3),
                                       name='kernel',
                                       initializer=self.kernel_initializer,
@@ -1862,6 +1870,14 @@ class LSTMCell(Layer):
 
     def build(self, input_shape):
         input_dim = input_shape[-1]
+
+        if type(self.recurrent_initializer).__name__ == 'Identity':
+            def recurrent_identity(shape, gain=1.):
+                return gain * np.concatenate(
+                    [np.identity(shape[0])] * (shape[1] // shape[0]), axis=1)
+
+            self.recurrent_initializer = recurrent_identity
+
         self.kernel = self.add_weight(shape=(input_dim, self.units * 4),
                                       name='kernel',
                                       initializer=self.kernel_initializer,
