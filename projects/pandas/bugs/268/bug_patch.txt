diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 9a84f1ddd..a8c3252f3 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -2593,12 +2593,12 @@ class DataFrame(NDFrame):
         ...              for t in dtypes])
         >>> df = pd.DataFrame(data)
         >>> df.head()
-           int64  float64  complex128  object  bool
-        0      1      1.0    1.0+0.0j       1  True
-        1      1      1.0    1.0+0.0j       1  True
-        2      1      1.0    1.0+0.0j       1  True
-        3      1      1.0    1.0+0.0j       1  True
-        4      1      1.0    1.0+0.0j       1  True
+           int64  float64            complex128  object  bool
+        0      1      1.0    1.000000+0.000000j       1  True
+        1      1      1.0    1.000000+0.000000j       1  True
+        2      1      1.0    1.000000+0.000000j       1  True
+        3      1      1.0    1.000000+0.000000j       1  True
+        4      1      1.0    1.000000+0.000000j       1  True
 
         >>> df.memory_usage()
         Index           128
diff --git a/pandas/io/formats/format.py b/pandas/io/formats/format.py
index 1aa9b4319..b47ab63b6 100644
--- a/pandas/io/formats/format.py
+++ b/pandas/io/formats/format.py
@@ -5,6 +5,7 @@ and latex files. This module also applies to display formatting.
 
 from functools import partial
 from io import StringIO
+import re
 from shutil import get_terminal_size
 from typing import (
     TYPE_CHECKING,
@@ -1688,17 +1689,10 @@ def _trim_zeros_complex(str_complexes: ndarray, na_rep: str = "NaN") -> List[str
     Separates the real and imaginary parts from the complex number, and
     executes the _trim_zeros_float method on each of those.
     """
-
-    def separate_and_trim(str_complex, na_rep):
-        num_arr = str_complex.split("+")
-        return (
-            _trim_zeros_float([num_arr[0]], na_rep)
-            + ["+"]
-            + _trim_zeros_float([num_arr[1][:-1]], na_rep)
-            + ["j"]
-        )
-
-    return ["".join(separate_and_trim(x, na_rep)) for x in str_complexes]
+    return [
+        "".join(_trim_zeros_float(re.split(r"([j+-])", x), na_rep))
+        for x in str_complexes
+    ]
 
 
 def _trim_zeros_float(
