diff --git a/pandas/conftest.py b/pandas/conftest.py
index 67e18f261..ad21d46e6 100644
--- a/pandas/conftest.py
+++ b/pandas/conftest.py
@@ -311,7 +311,7 @@ def dict_subclass():
 
 
 @pytest.fixture
-def non_mapping_dict_subclass():
+def non_dict_mapping_subclass():
     """
     Fixture for a non-mapping dictionary subclass.
     """
diff --git a/pandas/core/reshape/concat.py b/pandas/core/reshape/concat.py
index 091129707..b4497ce17 100644
--- a/pandas/core/reshape/concat.py
+++ b/pandas/core/reshape/concat.py
@@ -2,6 +2,7 @@
 Concat routines.
 """
 
+from collections import abc
 from typing import Iterable, List, Mapping, Union, overload
 
 import numpy as np
@@ -85,7 +86,7 @@ def concat(
     Parameters
     ----------
     objs : a sequence or mapping of Series or DataFrame objects
-        If a dict is passed, the sorted keys will be used as the `keys`
+        If a mapping is passed, the sorted keys will be used as the `keys`
         argument, unless it is passed, in which case the values will be
         selected (see below). Any None objects will be dropped silently unless
         they are all None in which case a ValueError will be raised.
@@ -315,7 +316,7 @@ class _Concatenator:
                 "Only can inner (intersect) or outer (union) join the other axis"
             )
 
-        if isinstance(objs, dict):
+        if isinstance(objs, abc.Mapping):
             if keys is None:
                 keys = list(objs.keys())
             objs = [objs[k] for k in keys]
diff --git a/pandas/tests/series/test_apply.py b/pandas/tests/series/test_apply.py
index 63acc1287..066182881 100644
--- a/pandas/tests/series/test_apply.py
+++ b/pandas/tests/series/test_apply.py
@@ -630,19 +630,19 @@ class TestSeriesMap:
         expected = Series([np.nan, np.nan, "three"])
         tm.assert_series_equal(result, expected)
 
-    def test_map_abc_mapping(self, non_mapping_dict_subclass):
+    def test_map_abc_mapping(self, non_dict_mapping_subclass):
         # https://github.com/pandas-dev/pandas/issues/29733
         # Check collections.abc.Mapping support as mapper for Series.map
         s = Series([1, 2, 3])
-        not_a_dictionary = non_mapping_dict_subclass({3: "three"})
+        not_a_dictionary = non_dict_mapping_subclass({3: "three"})
         result = s.map(not_a_dictionary)
         expected = Series([np.nan, np.nan, "three"])
         tm.assert_series_equal(result, expected)
 
-    def test_map_abc_mapping_with_missing(self, non_mapping_dict_subclass):
+    def test_map_abc_mapping_with_missing(self, non_dict_mapping_subclass):
         # https://github.com/pandas-dev/pandas/issues/29733
         # Check collections.abc.Mapping support as mapper for Series.map
-        class NonDictMappingWithMissing(non_mapping_dict_subclass):
+        class NonDictMappingWithMissing(non_dict_mapping_subclass):
             def __missing__(self, key):
                 return "missing"
 
diff --git a/pandas/tests/series/test_constructors.py b/pandas/tests/series/test_constructors.py
index e4c25f31c..55af73552 100644
--- a/pandas/tests/series/test_constructors.py
+++ b/pandas/tests/series/test_constructors.py
@@ -1124,9 +1124,9 @@ class TestSeriesConstructors:
         )
         tm.assert_series_equal(result, expected)
 
-    def test_constructor_mapping(self, non_mapping_dict_subclass):
+    def test_constructor_mapping(self, non_dict_mapping_subclass):
         # GH 29788
-        ndm = non_mapping_dict_subclass({3: "three"})
+        ndm = non_dict_mapping_subclass({3: "three"})
         result = Series(ndm)
         expected = Series(["three"], index=[3])
 
