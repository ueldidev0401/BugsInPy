diff --git a/pandas/core/arrays/datetimes.py b/pandas/core/arrays/datetimes.py
index dcdde4d7f..cc54fb5e5 100644
--- a/pandas/core/arrays/datetimes.py
+++ b/pandas/core/arrays/datetimes.py
@@ -161,11 +161,9 @@ def _dt_array_cmp(cls, op):
             raise ValueError("Lengths must match")
         else:
             if isinstance(other, list):
-                try:
-                    other = type(self)._from_sequence(other)
-                except ValueError:
-                    other = np.array(other, dtype=np.object_)
-            elif not isinstance(other, (np.ndarray, DatetimeArray)):
+                other = np.array(other)
+
+            if not isinstance(other, (np.ndarray, cls)):
                 # Following Timestamp convention, __eq__ is all-False
                 # and __ne__ is all True, others raise TypeError.
                 return invalid_comparison(self, other, op)
@@ -179,20 +177,14 @@ def _dt_array_cmp(cls, op):
                         op, self.astype(object), other
                     )
                 o_mask = isna(other)
+
             elif not (is_datetime64_dtype(other) or is_datetime64tz_dtype(other)):
                 # e.g. is_timedelta64_dtype(other)
                 return invalid_comparison(self, other, op)
+
             else:
                 self._assert_tzawareness_compat(other)
-
-                if (
-                    is_datetime64_dtype(other)
-                    and not is_datetime64_ns_dtype(other)
-                    or not hasattr(other, "asi8")
-                ):
-                    # e.g. other.dtype == 'datetime64[s]'
-                    # or an object-dtype ndarray
-                    other = type(self)._from_sequence(other)
+                other = type(self)._from_sequence(other)
 
                 result = op(self.view("i8"), other.view("i8"))
                 o_mask = other._isnan
diff --git a/pandas/core/arrays/timedeltas.py b/pandas/core/arrays/timedeltas.py
index 098ad2687..1874517f0 100644
--- a/pandas/core/arrays/timedeltas.py
+++ b/pandas/core/arrays/timedeltas.py
@@ -38,7 +38,7 @@ from pandas.core.dtypes.generic import (
 )
 from pandas.core.dtypes.missing import isna
 
-from pandas.core import nanops
+from pandas.core import nanops, ops
 from pandas.core.algorithms import checked_add_with_arr
 import pandas.core.common as com
 from pandas.core.ops.common import unpack_zerodim_and_defer
@@ -103,15 +103,29 @@ def _td_array_cmp(cls, op):
             raise ValueError("Lengths must match")
 
         else:
-            try:
-                other = type(self)._from_sequence(other)._data
-            except (ValueError, TypeError):
+            if isinstance(other, list):
+                other = np.array(other)
+
+            if not isinstance(other, (np.ndarray, cls)):
+                return invalid_comparison(self, other, op)
+
+            if is_object_dtype(other):
+                with np.errstate(all="ignore"):
+                    result = ops.comp_method_OBJECT_ARRAY(
+                        op, self.astype(object), other
+                    )
+                o_mask = isna(other)
+
+            elif not is_timedelta64_dtype(other):
+                # e.g. other is datetimearray
                 return invalid_comparison(self, other, op)
 
-            result = op(self.view("i8"), other.view("i8"))
-            result = com.values_from_object(result)
+            else:
+                other = type(self)._from_sequence(other)
+
+                result = op(self.view("i8"), other.view("i8"))
+                o_mask = other._isnan
 
-            o_mask = np.array(isna(other))
             if o_mask.any():
                 result[o_mask] = nat_result
 
diff --git a/pandas/tests/arithmetic/common.py b/pandas/tests/arithmetic/common.py
index 7c3ceb3db..83d19b8a2 100644
--- a/pandas/tests/arithmetic/common.py
+++ b/pandas/tests/arithmetic/common.py
@@ -70,7 +70,7 @@ def assert_invalid_comparison(left, right, box):
     result = right != left
     tm.assert_equal(result, ~expected)
 
-    msg = "Invalid comparison between"
+    msg = "Invalid comparison between|Cannot compare type|not supported between"
     with pytest.raises(TypeError, match=msg):
         left < right
     with pytest.raises(TypeError, match=msg):
diff --git a/pandas/tests/arithmetic/test_timedelta64.py b/pandas/tests/arithmetic/test_timedelta64.py
index 9b0d3712e..158da37aa 100644
--- a/pandas/tests/arithmetic/test_timedelta64.py
+++ b/pandas/tests/arithmetic/test_timedelta64.py
@@ -76,6 +76,49 @@ class TestTimedelta64ArrayLikeComparisons:
 
         assert_invalid_comparison(obj, invalid, box)
 
+    @pytest.mark.parametrize(
+        "other",
+        [
+            list(range(10)),
+            np.arange(10),
+            np.arange(10).astype(np.float32),
+            np.arange(10).astype(object),
+            pd.date_range("1970-01-01", periods=10, tz="UTC").array,
+            np.array(pd.date_range("1970-01-01", periods=10)),
+            list(pd.date_range("1970-01-01", periods=10)),
+            pd.date_range("1970-01-01", periods=10).astype(object),
+            pd.period_range("1971-01-01", freq="D", periods=10).array,
+            pd.period_range("1971-01-01", freq="D", periods=10).astype(object),
+        ],
+    )
+    def test_td64arr_cmp_arraylike_invalid(self, other):
+        # We don't parametrize this over box_with_array because listlike
+        #  other plays poorly with assert_invalid_comparison reversed checks
+
+        rng = timedelta_range("1 days", periods=10)._data
+        assert_invalid_comparison(rng, other, tm.to_array)
+
+    def test_td64arr_cmp_mixed_invalid(self):
+        rng = timedelta_range("1 days", periods=5)._data
+
+        other = np.array([0, 1, 2, rng[3], pd.Timestamp.now()])
+        result = rng == other
+        expected = np.array([False, False, False, True, False])
+        tm.assert_numpy_array_equal(result, expected)
+
+        result = rng != other
+        tm.assert_numpy_array_equal(result, ~expected)
+
+        msg = "Invalid comparison between|Cannot compare type|not supported between"
+        with pytest.raises(TypeError, match=msg):
+            rng < other
+        with pytest.raises(TypeError, match=msg):
+            rng > other
+        with pytest.raises(TypeError, match=msg):
+            rng <= other
+        with pytest.raises(TypeError, match=msg):
+            rng >= other
+
 
 class TestTimedelta64ArrayComparisons:
     # TODO: All of these need to be parametrized over box
