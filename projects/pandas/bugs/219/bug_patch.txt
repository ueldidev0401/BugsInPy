diff --git a/pandas/core/frame.py b/pandas/core/frame.py
index 1ab62d7a9..1a19910a0 100644
--- a/pandas/core/frame.py
+++ b/pandas/core/frame.py
@@ -5286,7 +5286,7 @@ class DataFrame(NDFrame):
     def _combine_match_index(self, other, func):
         # at this point we have `self.index.equals(other.index)`
 
-        if self._is_mixed_type or other._is_mixed_type:
+        if ops.should_series_dispatch(self, other, func):
             # operate column-wise; avoid costly object-casting in `.values`
             new_data = ops.dispatch_to_series(self, other, func)
         else:
diff --git a/pandas/core/ops/__init__.py b/pandas/core/ops/__init__.py
index c979b473a..42f1d4e99 100644
--- a/pandas/core/ops/__init__.py
+++ b/pandas/core/ops/__init__.py
@@ -692,6 +692,7 @@ def _arith_method_FRAME(cls, op, special):
     default_axis = _get_frame_op_default_axis(op_name)
 
     na_op = define_na_arithmetic_op(op, str_rep, eval_kwargs)
+    is_logical = str_rep in ["&", "|", "^"]
 
     if op_name in _op_descriptions:
         # i.e. include "add" but not "__add__"
@@ -707,11 +708,13 @@ def _arith_method_FRAME(cls, op, special):
         if isinstance(other, ABCDataFrame):
             # Another DataFrame
             pass_op = op if should_series_dispatch(self, other, op) else na_op
+            pass_op = pass_op if not is_logical else op
             return self._combine_frame(other, pass_op, fill_value, level)
         elif isinstance(other, ABCSeries):
             # For these values of `axis`, we end up dispatching to Series op,
             # so do not want the masked op.
             pass_op = op if axis in [0, "columns", None] else na_op
+            pass_op = pass_op if not is_logical else op
             return _combine_series_frame(
                 self, other, pass_op, fill_value=fill_value, axis=axis, level=level
             )
diff --git a/pandas/core/ops/dispatch.py b/pandas/core/ops/dispatch.py
index 9835d57ee..c39f4d6d9 100644
--- a/pandas/core/ops/dispatch.py
+++ b/pandas/core/ops/dispatch.py
@@ -56,7 +56,7 @@ def should_series_dispatch(left, right, op):
     Parameters
     ----------
     left : DataFrame
-    right : DataFrame
+    right : DataFrame or Series
     op : binary operator
 
     Returns
@@ -66,6 +66,16 @@ def should_series_dispatch(left, right, op):
     if left._is_mixed_type or right._is_mixed_type:
         return True
 
+    if op.__name__.strip("_") in ["and", "or", "xor", "rand", "ror", "rxor"]:
+        # TODO: GH references for what this fixes
+        # Note: this check must come before the check for nonempty columns.
+        return True
+
+    if right.ndim == 1:
+        # operating with Series, short-circuit checks that would fail
+        #  with AttributeError.
+        return False
+
     if not len(left.columns) or not len(right.columns):
         # ensure obj.dtypes[0] exists for each obj
         return False
