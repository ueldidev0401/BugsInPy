diff --git a/tqdm/_main.py b/tqdm/_main.py
index fff4d49..3634c8a 100644
--- a/tqdm/_main.py
+++ b/tqdm/_main.py
@@ -1,3 +1,4 @@
+from __future__ import print_function
 from ._tqdm import tqdm
 from ._version import __version__  # NOQA
 import sys
@@ -6,51 +7,63 @@ __all__ = ["main"]
 
 
 def cast(val, typ):
-    if val == 'None':
-        return None
     if typ == 'bool':
-        return str(val) == 'True'
-    # try:
+        return (str(val) == 'True') or not str(val)
     return eval(typ + '("' + str(val) + '")')
-    # except:
-    #     # print val, typ
-    #     if val == 'special':
-    #         return 'whatever... just an example'
-    #     else:
-    #         return eval(typ + '()')
 
 
-RE_OPTS = re.compile(r' {8}(\w+)\s{2,}:\s*(str|int|float|bool)', flags=re.M)
-# RE_OPTS_SOME = re.compile(r' {8}(\w+)  : (str|int|float)', flags=re.M)
-# RE_OPTS_BOOL = re.compile(r' {8}(\w+)  : bool', flags=re.M)
+# Don't have to worry about Python 2.6 not supporting re flags
+# since it does not support executing modules either.
+# RE_OPTS = re.compile(r' {8}(\S+)\s{2,}:\s*(str|int|float|bool)', flags=re.M)
+RE_OPTS = re.compile(r' {8}(\S+)\s{2,}:\s*([^\s,]+)', flags=re.M)
 
+# TODO: add custom support for some of the following?
+UNSUPPORTED_OPTS = ('iterable', 'gui', 'out', 'file')
 
-def main():
-    from docopt import docopt
 
+def main():
     d = tqdm.__init__.__doc__
+
     opt_types = dict(RE_OPTS.findall(d))
-    # d = RE_OPTS_SOME.sub(r'  --\1=<v>  ', d)
-    # d = RE_OPTS_BOOL.sub(r'  --\1      ', d)
-    d = RE_OPTS.sub(r'  --\1=<v>  : \2', d)
-    d = d[d.find('  --desc='):d.find('Returns\n')]
-    __doc__ = """
-Usage:
-    tqdm [--help | options]
+
+    for o in UNSUPPORTED_OPTS:
+        opt_types.pop(o)
+
+    # d = RE_OPTS.sub(r'  --\1=<\1>  : \2', d)
+    split = RE_OPTS.split(d)
+    opt_types_desc = zip(split[1::3], split[2::3], split[3::3])
+    d = ''.join('  --{0}=<{0}>  : {1}{2}'.format(*otd)
+                for otd in opt_types_desc if otd[0] not in UNSUPPORTED_OPTS)
+
+    __doc__ = """Usage:
+  tqdm [--help | options]
 
 Options:
   -h, --help     Print this help and exit
   -v, --version  Print version and exit
-""" + d
 
-    opts = docopt(__doc__, version=__version__)
+""" + d.strip('\n') + '\n'
+
+    # opts = docopt(__doc__, version=__version__)
+    if any(v in sys.argv for v in ('-v', '--version')):
+        sys.stdout.write(__version__ + '\n')
+        sys.exit(0)
+    elif any(v in sys.argv for v in ('-h', '--help')):
+        sys.stdout.write(__doc__ + '\n')
+        sys.exit(0)
+
+    argv = re.split('(--\S+)[=\s]*', ' '.join(sys.argv[1:]))
+    opts = dict(zip(argv[1::2], argv[2::2]))
 
+    tqdm_args = {}
     try:
-        for opt in opt_types:
-            opt_types[opt] = cast(opts['--' + opt], opt_types[opt])
-        for i in tqdm(sys.stdin, **opt_types):
+        for (o, v) in opts.items():
+            tqdm_args[o[2:]] = cast(v, opt_types[o[2:]])
+        # print('debug |', tqdm_args)
+        for i in tqdm(sys.stdin, **tqdm_args):
             sys.stdout.write(i)
     except:  # pragma: no cover
-        sys.stderr.write(__doc__ + '\n')
         for i in sys.stdin:
             sys.stdout.write(i)
+        sys.stderr.write('\nUsage:\n  tqdm [--help | options]\n')
+        raise
diff --git a/tqdm/_tqdm.py b/tqdm/_tqdm.py
index 1700f97..3f6f4f2 100644
--- a/tqdm/_tqdm.py
+++ b/tqdm/_tqdm.py
@@ -293,15 +293,16 @@ class tqdm(object):
         ----------
         iterable  : iterable, optional
             Iterable to decorate with a progressbar.
-            Leave blank [default: None] to manually manage the updates.
+            Leave blank to manually manage the updates.
         desc  : str, optional
-            Prefix for the progressbar [default: None].
+            Prefix for the progressbar.
         total  : int, optional
-            The number of expected iterations. If [default: None],
+            The number of expected iterations. If unspecified,
             len(iterable) is used if possible. As a last resort, only basic
             progress statistics are displayed (no ETA, no progressbar).
             If `gui` is True and this parameter needs subsequent updating,
-            specify an initial arbitrary large positive integer, e.g. int(9e9).
+            specify an initial arbitrary large positive integer,
+            e.g. int(9e9).
         leave  : bool, optional
             If [default: True], keeps all traces of the progressbar
             upon termination of iteration.
@@ -312,7 +313,7 @@ class tqdm(object):
         ncols  : int, optional
             The width of the entire output message. If specified,
             dynamically resizes the progressbar to stay within this bound.
-            If [default: None], attempts to use environment width. The
+            If unspecified, attempts to use environment width. The
             fallback is a meter width of 10 and no limit for the counter and
             statistics. If 0, will not print any meter (only stats).
         mininterval  : float, optional
@@ -320,10 +321,10 @@ class tqdm(object):
         maxinterval  : float, optional
             Maximum progress update interval, in seconds [default: 10.0].
         miniters  : int, optional
-            Minimum progress update interval, in iterations [default: None].
+            Minimum progress update interval, in iterations.
             If specified, will set `mininterval` to 0.
         ascii  : bool, optional
-            If [default: None] or False, use unicode (smooth blocks) to fill
+            If unspecified or False, use unicode (smooth blocks) to fill
             the meter. The fallback is to use ASCII characters `1-9 #`.
         disable  : bool
             Whether to disable the entire progressbar wrapper
@@ -345,7 +346,7 @@ class tqdm(object):
             (current/instantaneous speed) [default: 0.3].
         bar_format  : str, optional
             Specify a custom bar string formatting. May impact performance.
-            If [default: None], will use '{l_bar}{bar}{r_bar}', where l_bar is
+            If unspecified, will use '{l_bar}{bar}{r_bar}', where l_bar is
             '{desc}{percentage:3.0f}%|' and r_bar is
             '| {n_fmt}/{total_fmt} [{elapsed_str}<{remaining_str}, {rate_fmt}]'
             Possible vars: bar, n, n_fmt, total, total_fmt, percentage,
@@ -355,7 +356,7 @@ class tqdm(object):
             bar [default: 0].
         position  : int, optional
             Specify the line offset to print this bar (starting from 0)
-            Automatic if [default: None].
+            Automatic if unspecified.
             Useful to manage multiple bars at once (eg, from threads).
         gui  : bool, optional
             WARNING: internal parameter - do not use.
